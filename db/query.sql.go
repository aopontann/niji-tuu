// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
)

const listItemCount = `-- name: ListItemCount :many
SELECT replace(id, 'UC', 'UU') AS id, item_count FROM vtubers
`

type ListItemCountRow struct {
	ID        string
	ItemCount int32
}

func (q *Queries) ListItemCount(ctx context.Context) ([]ListItemCountRow, error) {
	rows, err := q.db.QueryContext(ctx, listItemCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemCountRow
	for rows.Next() {
		var i ListItemCountRow
		if err := rows.Scan(&i.ID, &i.ItemCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlaylistID = `-- name: ListPlaylistID :many
SELECT replace(id, 'UC', 'UU') AS id FROM vtubers
`

func (q *Queries) ListPlaylistID(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
