<button id="submit" class="button is-link">通知登録</button>

<script>
  import { toast } from "bulma-toast";
  import { getMessaging, getToken, isSupported } from "firebase/messaging";
  import { vapidKey } from "../scripts/main";

  const messaging = getMessaging();
  const submitEle = document.getElementById("submit") as HTMLElement;

  const $iosModalEle = document.getElementById("ios-modal-js") as HTMLElement;

  submitEle.addEventListener("click", async () => {
    if (!await isSupported()) {
      $iosModalEle.classList.add("is-active");
      return
    }
    console.log("POST");
    // ローディング表示
    submitEle.classList.add("is-loading");

    console.log("generate token...");
    const currentToken = await getFCMToken();
    if (currentToken == "") {
      // ローディング解除
      submitEle.classList.remove("is-loading");
      return;
    }

    const ok = await saveFCMToken(currentToken, {
      song: window.localStorage.getItem("checkbox-song") == "true",
      info: window.localStorage.getItem("checkbox-info") == "true",
    });
    if (!ok) {
      window.alert("トークンの登録に失敗しました");
      // ローディング解除
      submitEle.classList.remove("is-loading");
      return;
    }

    // ローディング解除
    submitEle.classList.remove("is-loading");

    toast({
      message: "登録成功",
      type: "is-success",
      pauseOnHover: true,
      opacity: 5,
      extraClasses: "mt-6"
    });
  });

  const getFCMToken = async () => {
    try {
      const currentToken = await getToken(messaging, { vapidKey });
      console.log("generated token:", currentToken);
      return currentToken;
    } catch (error) {
      // 通知権限がブロックされている場合
      if (Notification.permission === "denied") {
        window.alert("通知がブロックされています。");
      }

      // 通知権限がブロックされていないが、ユーザーの許可を得れていない場合
      if (Notification.permission === "default") {
        window.alert("通知を許可してください。");
      }

      if (Notification.permission === "granted") {
        return await getToken(messaging, { vapidKey });
      }
    }
    return "";
  };

  const saveFCMToken = async (token: string, data = {}) => {
    const url = "/api/subscription";
    const response = await fetch(url, {
      method: "POST",
      cache: "no-cache",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer: ${token}`,
      },
      body: JSON.stringify(data), // 本体のデータ型は "Content-Type" ヘッダーと一致させる必要があります
    });

    console.log(response.status);
    console.log(response.ok);
    return response.ok;
  };
</script>
